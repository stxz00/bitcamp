/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.107
 * Generated at: 2021-01-22 04:30:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.*;

public final class ex02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


	int a;
	class test{};
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("   \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- html 주석 -->\r\n");
      out.write("\t<h1>jsp page test</h1>\r\n");
      out.write("\t");
 //여기부터는 자바 언어 사용 가능
	//html File과 jsp File의 차이점은 jsp는 이렇게 자바 사용이 가능한거임
	//주석작성
	//Date date = new Date();
	//System.out.println(date);
	//main이라고 생각하면 됨 그래서 메소드가 여기서 안되는거
	int a = 1234;
	for(int i = 0; i <10; i++){
	
      out.write("\r\n");
      out.write("\t\t<p>출력");
      out.print(i+1 );
      out.print(a );
      out.write("</p> \r\n");
      out.write("\t\t");
//이렇게 %=하면 브라우저에 i+1이 출력됨!
			//이게 바로 표현식임!(out.print)
		
      out.write('\r');
      out.write('\n');
      out.write('	');
 
	
	}
	//클라이언트가 새로운 페이지로 갈때마다 웹서버에 새롭게 요청해서 어플리케이션 서버->데이터베이스->어플리케이션서버->웹서버->웹브라우저에 보냄
	//자바의 코드로 동적 페이지를  만드는 것
	//페이지를 들어올때마다 데이터베이스를 통하여 변해야할 것이 있어야 한다면 자바를 이용해서 동적으로 행함 근데 바로 쏴줄지, 자바에게 요청해서 할 지는 어플리케이션 서버(톰캣, 현재 우리 톰캣은 웹서버와 어플리케이션 서버가 둘 다 통합되어있음!)에서 jsp를 통하여 웹서버에게 행동을 보내주고 웹서버는 이걸 브라우저에 쏴줌(즉, 웹서버는 IO임 -> 소스를 보면 자바의 행위들이 없잖음!) 그래서 자바는 어플리케이션과 데이터베이스까지만 수행함~ 
	// 자바는 객체 지향언어, 처음 생성한 객체를 요청할 때마다 객체를 재사용 하는것 즉, 새롭게 할 필요 없어서 처음에만 클래스파일 받고 생성자 만들기 때문에 느리고 계속 재사용해서 빠르고 부하가 매우 적음.
	// 객체는 서버가 사라질때까지 남아있음.
	// jsp는 스크립트 방식.
	// html은 인터프리터 언어, jsp는 자바언어인데 jsp는 인터프러터 처럼 새로고침했을 때 자동으로 바꿔줌. 이는 어플리케이션 서버(와스(was)컨테이너)에서 자바쪽에서 변경된 걸 알아서 자동으로 처리해줌(어플리케이션 서버에서 함, 소스파일 만들고 컴파일도 하는)
	
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
